shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass,summary)
set.set(1)
set.seed(1)
rpois(5,2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
swirl::install_course("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringAsFactors = FALSE)
?read.csv
mydf <- read.csv(file = path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na())
filter(cran, r_version = !is.na())
filter(cran, r_version(!is.na())
)
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size/2^20, size_mb = size / 2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package(mean(size)))
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <-filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <-arrange(top_counts, count)
top_counts_sorted <-arrange(top_counts, desc(count)
top_counts_sorted <-arrange(top_counts, desc(count))
top_counts_sorted <-arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <-gather(students, sex_class, count, -grade)
res <-gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col= sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
?parse_number
library(swirl)
swirl()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed<- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
library(swirl)
ls()
rm(list=ls())
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col =="blue")
boxplot(ppm, col ="blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm,col="green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(ppm ~ region, col = "red")
boxplot(pollution, ppm ~ region, col = "red")
boxplot(pollution, col = "red")
boxplot(pm25~region, col = "red")
boxplot(pollution, pm25~region, col = "red")
?boxplot
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=(2,1),mar=c(4,4,2,1))
par(mfrow=(2,1),mar=c(4,4,2,1)))
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution, region == "west"), west$pm25, col = "green")
hist(west$pm25, col = "green")
hist(west = subset(pollution, region == "west"), $pm25, col = "green")
hist(west = subset(pollution, region == "west"), west$pm25, col = "green")
hist(west <- subset(pollution, region == "west"), west$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude~pm25))
with(pollution, plot(latitude,pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrpw = c(1,2) , mar = c(5,4,2,1))
par(mfrow = c(1,2) , mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
?Devices
faithful
(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region , data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region , data = state, layout = c(2,2))
head(mpg)
dim(pmg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, dat = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
bpxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
with(airquality, plot())
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par(length)
length(par)
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type = "n", airquality$Ozone)
title("Wind and Ozone in NYC")
may <- subset(airquality, month == 5)
may <- subset(airquality, Month == 5)
with(may, plot(wind, ozone, pch = 4, col = "blue"))
with(may, plot(Wind, Ozone, pch = 4, col = "blue"))
with(may, plot(Wind, Ozone, pch = 17, col = "blue"))
points(may$Wind, may$Ozone, pch = 17, col = "blue"))
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month !=5)
points(notmay$Wind, notmay$ozone, col="red")
points(notmay$Wind, notmay$ozone, col="red", pch=8)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch = c(17,8), col = c("blue","red0"), legend = c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd = 2)
par(mfrow = (1,2))
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
ls()
rm(ls())
rm.ls()
rm(list = ls())
clear()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",df)
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",file = df)
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",file = "df")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",destfile = "df")
my_df <- data.frame(df)
head(my_df)
df
getwd()
selected$Datetime <- as.POSIXct(sFile)
## Plot 1
hist(selected$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
plot1()
source('~/plot1.R')
source('~/Plot2.R')
source('~/Plot2.R')
source('~/Plot2.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot3.R')
source('~/Plot2.R')
source('~/plot1.R')
source('~/.active-rstudio-document')
source('~/test.R')
source('~/test.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot4.R')
library(swirl)
ls()
rm(list = ls())
swirl()
head(airquality)
xyplot(ozone~wind, data = airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local == TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R",local = TRUE))
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = "myxlab", ylab = "myylab", main = "mymain")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p2 <- colorRampPalette(c("blue","green"), alpha = 0.5)
p2 <- colorRampPalette(c("blue","green"), alpha = .5)
p3 <- colorRampPalette(c("blue","green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0,.5,.5))
plot(x, y, pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(colcano, col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
x <- c(-25,340,250,440,115)
class(x)
var(x)
x
heights <- c(-25,340,250,440,115)
var(heights)*(length(heights)-1)/length(heights)
x <- (6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
x <- c(6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
sd(x)
heights <- (6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
heights <- c(6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
sd(heights)*(length(heights)-1)/length(heights)
sd(heights)
heights <- c(-25,340,250,440,115)
sd(heights)
mean(x)
sd(x)
x <- c(165,175,176,159,170)
mean(x)
median(x)
sd(heights)*(length(heights)-1)/length(heights)
head(cars)
cars
mtcast
mtcars
class(mtcars)
write.csv(mtcars, "mtcars.csv")
source('~/GitHub/PM2.5-Emissions/Plot1.R')
getwd()
setwd("C:/Users/astanfor2192/Documents/GitHub/PM2.5-Emissions")
getwd()
ls()
rm(list = ls())
ls
ls()
source('~/GitHub/PM2.5-Emissions/Plot1.R')
head(summary)
plot(summary$year, summary$Emissions)
test <- by(summary, summary$year, sum(summary$Emissions))
source('~/GitHub/PM2.5-Emissions/Plot1.R')
sums
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
sums
names(summary)
source('~/GitHub/PM2.5-Emissions/Plot1.R')
x.sums
source('~/GitHub/PM2.5-Emissions/Plot1.R')
x.sums
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
?axis
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
x.sums
source('~/GitHub/PM2.5-Emissions/Plot1.R')
class(x.sums)
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
source('~/GitHub/PM2.5-Emissions/Plot1.R')
s.sums
asfdafdasf
kaj;fdl
skjl()
